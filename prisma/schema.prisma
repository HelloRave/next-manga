// schema.prisma
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          String?   @default("User")
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    favourites    Manga[]   @relation("Favourited")
    reviews       Review[]
    Account       Account[]
}

model Manga {
    id             String     @id @default(uuid())
    author         Author     @relation(fields: [authorId], references: [id])
    authorId       String
    title          String     @unique
    description    String
    ongoing        Boolean
    animeAdaptaion Boolean
    firstPublished DateTime
    likes          Int?
    rating         Float?
    favourites     User[]     @relation("Favourited")
    reviews        Review[]
    categories     Category[]
}

model Author {
    id     String  @id @default(uuid())
    name   String  @unique
    mangas Manga[]
}

model Category {
    id     String  @id @default(uuid())
    name   String  @unique
    mangas Manga[]
}

model Review {
    description String
    rating      Int
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    manga       Manga  @relation(fields: [mangaId], references: [id])
    mangaId     String

    @@id([userId, mangaId])
}
